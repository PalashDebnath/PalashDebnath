import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'profile-single-responsibility',
  templateUrl: './single-responsibility.component.html',
  styleUrls: ['./single-responsibility.component.scss']
})
export class SingleResponsibilityComponent implements OnInit {
  impFirst: string[] = ['namespace DesignPatterns;', '', '// We use in-memory storage to store the employees, rather than a real database.', '// We also implemented the lazy loading so that we do not use any memory until is it absolutely needed.', 'public class Store', '{', '  private static Lazy<List<Employee>> employees = new Lazy<List<Employee>>();', '  public static List<Employee> Employees => employees.Value;', '}', '', '// We have created Employee class. Which for now holds the employee data and the registration process.', 'public class Employee', '{', '  public string FirstName { get; private set; }', '  public string LastName { get; private set; }', '  public Employee(string firstName, string lastName)', '  {', '    FirstName = firstName;', '    LastName = lastName;', '  }', '  public void Register()', '  {', '    Store.Employees.Add(this);', '  }', '}', '', 'public class Program', '{', '  public static void Main(string[] args)', '  {', '    var employeeOne = new Employee("Frist", "Employee");', '    employeeOne.Register();', '  }', '}', '', '// Now consider we have to do further changes', '// 1. We have to also store the email of the employee.', '// 2. When an employee registers he/she receives an confirmation email.', '// If we think about the requirements, one is to change the data of the Employee, whereas the other one is to add a new functionality', '// to Employee class. If we visit the Single Responsibility Principle it says there should be only one reason for a class or function', '// (method) to change, but here we have two completely different reason to change the Employee class. Which violate the', '// Single Responsibility Principle. Let see how we can do better on second implementation.'];
  impSecond: string[] = ['namespace DesignPatterns;', '', '// We use in-memory storage to store the employees, rather than a real database.', '// We also implemented the lazy loading so that we do not use any memory until is it absolutely needed.', 'public class Store', '{', '  private static Lazy<List<Employee>> employees = new Lazy<List<Employee>>();', '  public static List<Employee> Employees => employees.Value;', '}', '', '// Modified the Employee class to only hold the data.', 'public class Employee', '{', '  public string FirstName { get; private set; }', '  public string LastName { get; private set; }', '  public string Email { get; private set; }', '  public Employee(string firstName, string lastName, string email)', '  {', '    FirstName = firstName;', '    LastName = lastName;', '    Email = email;', '  }', '}', '', '// Created EmployeeService to handle registration and send email out while new employee registered.', 'public class EmployeeService', '{', '  public async static Task RegisterAsync(Employee employee)', '  {', '    Store.Employees.Add(employee);', '    await SendEmailAsync(employee.Email, "Registration", "Congratulation ! Your are successfully registered.");', '  }', '  private static async Task SendEmailAsync(string email, string subject, string message)', '  {', '    var emailMessage = new MimeMessage();', '', '    emailMessage.From.Add(new MailboxAddress("Admin", "no-reply@admin.com"));', '    emailMessage.To.Add(new MailboxAddress(string.Empty, email));', '    emailMessage.Subject = subject;', '    emailMessage.Body = new TextPart("plain") { Text = message };', '', '    using (SmtpClient smtpClient = new SmtpClient())', '    {', '      smtpClient.LocalDomain = "smtp-global.com";', '      await smtpClient.ConnectAsync("smtp.relay.uri", 25, SecureSocketOptions.None).ConfigureAwait(false);', '      await smtpClient.SendAsync(emailMessage).ConfigureAwait(false);', '      await smtpClient.DisconnectAsync(true).ConfigureAwait(false);', '    }', '  }', '}', '', 'public class Program', '{', '  public async static void Main(string[] args)', '  {', '    var employeeOne = new Employee("Frist", "Employee", "first.employee@outlook.com");', '    await EmployeeService.RegisterAsync(employeeOne);', '  }', '}', '', '// Now lets revisit to our implementation again. we have separated out the data and the functionality into two different classes,', '// clearly we improve our solution in regards to Single Responsibility Principle in compare to previous solution.', '', '// Now consider the EmployeeService class, providing service for sending email is not a direct responsibility of it. Hence we can', '// say EmployeeService class in performing more than one responsibility. We could clearly see in this case we are violating the', '// Single Responsibility Principle. Let see how we can do better on third implementation.'];
  impThird: string[] = ['namespace DesignPatterns;', '', '// We use in-memory storage to store the employees, rather than a real database.', '// We also implemented the lazy loading so that we do not use any memory until is it absolutely needed.', 'public class Store', '{', '  private static Lazy<List<Employee>> employees = new Lazy<List<Employee>>();', '  public static List<Employee> Employees => employees.Value;', '}', '', '// Modified the Employee class to only hold the data.', 'public class Employee', '{', '  public string FirstName { get; private set; }', '  public string LastName { get; private set; }', '  public string Email { get; private set; }', '  public Employee(string firstName, string lastName, string email)', '  {', '    FirstName = firstName;', '    LastName = lastName;', '    Email = email;', '  }', '}', '', '// Modified EmployeeService class to handle employee related services.', 'public class EmployeeService', '{', '  public async static Task RegisterAsync(Employee employee)', '  {', '    Store.Employees.Add(employee);', '    await EmailService.SendEmailAsync(employee.Email, "Registration", "Congratulation ! Your are successfully registered.");', '  }', '}', '', '// Created EmailService class to handle email related services.', 'public class EmailService', '{', '  public static async Task SendEmailAsync(string email, string subject, string message)', '  {', '    var emailMessage = new MimeMessage();', '', '    emailMessage.From.Add(new MailboxAddress("Admin", "no-reply@admin.com"));', '    emailMessage.To.Add(new MailboxAddress(string.Empty, email));', '    emailMessage.Subject = subject;', '    emailMessage.Body = new TextPart("plain") { Text = message };', '', '    using (SmtpClient smtpClient = new SmtpClient())', '    {', '      smtpClient.LocalDomain = "smtp-global.com";', '      await smtpClient.ConnectAsync("smtp.relay.uri", 25, SecureSocketOptions.None).ConfigureAwait(false);', '      await smtpClient.SendAsync(emailMessage).ConfigureAwait(false);', '      await smtpClient.DisconnectAsync(true).ConfigureAwait(false);', '    }', '  }', '} ', '', 'public class Program', '{', '  public async static void Main(string[] args)', '  {', '    var employeeOne = new Employee("Frist", "Employee", "first.employee@outlook.com");', '    await EmployeeService.RegisterAsync(employeeOne);', '  }', '}'];
  impFourth: string[] = ['// We use in-memory storage to store the employees, rather than a real database.', 'class Store', '{', '  static Employees: Employee[];', '}', '', '// We have created Employee class. Which for now holds the employee data and the registration process.', 'class Employee', '{', '  public firstName: string;', '  public lastName: string;', '  constructor(fName: string, lName: string)', '  {', '    this.firstName = fName;', '    this.lastName = lName;', '  }', '  public Register(): void', '  {', '    Store.Employees.push(this);', '  }', '}', '', 'var store = new Store();', 'var employeeOne = new Employee("First", "Employee");', 'employeeOne.Register();', '', '// Now consider we have to do further changes', '// 1. We have to also store the email of the employee.', '// 2. When an employee registers he/she receives an confirmation email.', '// If we think about the requirements, one is to change the data of the Employee, whereas the other one is to add a new functionality', '// to Employee class. If we visit the Single Responsibility Principle it says there should be only one reason for a class or function', '// (method) to change, but here we have two completely different reason to change the Employee class. Which violate the', '// Single Responsibility Principle. Let see how we can do better on second implementation.'];
  impFifth: string[] = ['// We use in-memory storage to store the employees, rather than a real database.', 'class Store', '{', '  static Employees: Employee[] = [];', '}', '', '// Modified the Employee class to only hold the data.', 'class Employee', '{', '  public firstName: string;', '  public lastName: string;', '  public email: string;', '  constructor(fName: string, lName: string, email: string)', '  {', '    this.firstName = fName;', '    this.lastName = lName;', '    this.email = email;', '  }', '}', '', '// Created EmployeeService to handle registration and send email out while new employee registered.', 'class EmployeeService', '{', '  public static Register(employee: Employee): void', '  {', '    Store.Employees.push(employee);', '    this.SendEmail(employee.email, "Registration", "Congratulation ! Your are successfully registered.");', '  }', '  private static SendEmail(email: string, subject: string, message: string)', '  {', '    console.log("To: " + email);', '    console.log("From: no-reply.admin@outlook.com");', '    console.log("Subject: " + subject);', '    console.log("Message: " + message);', '  }', '}', '', 'var store = new Store();', 'var employeeOne = new Employee("First", "Employee", "first.employee@outlook.com");', 'EmployeeService.Register(employeeOne);', '', '// Now lets revisit to our implementation again. we have separated out the data and the functionality into two different classes,', '// clearly we improve our solution in regards to Single Responsibility Principle in compare to previous solution.', '', '// Now consider the EmployeeService class, providing service for sending email is not a direct responsibility of it. Hence we can', '// say EmployeeService class in performing more than one responsibility. We could clearly see in this case we are violating the', '// Single Responsibility Principle. Let see how we can do better on third implementation.'];
  impSixth: string[] = ['// We use in-memory storage to store the employees, rather than a real database.', 'class Store', '{', '  static Employees: Employee[] = [];', '}', '', '// Modified the Employee class to only hold the data.', 'class Employee', '{', '  public firstName: string;', '  public lastName: string;', '  public email: string;', '  constructor(fName: string, lName: string, email: string)', '  {', '    this.firstName = fName;', '    this.lastName = lName;', '    this.email = email;', '  }', '}', '', '// Modified EmployeeService class to handle employee related services.', 'class EmployeeService', '{', '  public static Register(employee: Employee): void', '  {', '    Store.Employees.push(employee);', '    EmailService.SendEmail(employee.email, "Registration", "Congratulation ! Your are successfully registered.");', '  }', '}', '', '// Created EmailService class to handle email related services.', 'class EmailService', '{', '  public static SendEmail(email: string, subject: string, message: string)', '  {', '    console.log("To: " + email);', '    console.log("From: no-reply.admin@outlook.com");', '    console.log("Subject: " + subject);', '    console.log("Message: " + message);', '  }', '}', '', 'var store = new Store();', 'var employeeOne = new Employee("First", "Employee", "first.employee@outlook.com");', 'EmployeeService.Register(employeeOne);'];

  constructor() { }

  ngOnInit(): void { }
}
